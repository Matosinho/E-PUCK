--This is the Epuck principal control script. It is threaded
--Since this is a simple almost one page code, there was no need of OOP, instead it was used functions to simplifly the code
--Main Function
function sysCall_threadmain()
    -- Put some initialization code here:
    opMode=sim.getScriptSimulationParameter(sim.handle_self,'opMode')
    sim.setThreadSwitchTiming(200) -- We will manually switch in the main loop
    bodyElements=sim.getObjectHandle('ePuck_bodyElements')
    leftMotor=sim.getObjectHandle('ePuck_leftJoint')
    rightMotor=sim.getObjectHandle('ePuck_rightJoint')
    ePuck=sim.getObjectHandle('ePuck')
    ePuckBase=sim.getObjectHandle('ePuck_base')
    ledLight=sim.getObjectHandle('ePuck_ledLight')  
    proxSens={-1,-1,-1,-1,-1,-1,-1,-1}      
    for i=1,8,1 do
        proxSens[i]=sim.getObjectHandle('ePuck_proxSensor'..i)
 end

    --Constants        
        maxVel=120*math.pi/180
        --Led Colors
            RED = {1,0,0}
            BLUE = {0,0,1}
            GREEN = {0,1,0}  
            YELLOW = {1,1,0}
            PURPLE = {1,0,1}
            OFF = {0,0,0}
        
        --Robot State            
            LINE_FOLLOWING = 0
            OBJECT_IN_FRONT = 1
            BYPASSING_OBJECT = 2
            SEARCHING_LINE = 3
            STARTING_SIM = 4
            COUNTDOWN_STATE_CHANGE_STEPS = 10
        
        --Movement -> Calibration Constants
            START_SKIPPING = 20
            DISTANCE_THRESHOLD = 0.3
            SPEED_STEP = 1.5
            DEFAULT_SPEED = 0.5
            MAX_LIGHT_DIFFERENCE = 0.2
            SEARCH_SKIP = 10
            SPEED_STEP_SEARCH = 1
            DEFAULT_SPEED_SEARCH = 0.5
            MIN_LIGHT_DIFFERENCE_SEARCH = 0.6
            INDECISION_DIFFERENCE = 0.005
            INDECISION_SKIP = 5     
            NINETY_DEGREE_TURN_NORMAL = 15
            NINETY_DEGREE_TURN = 6
            U_TURN = 25
            STEPS_TO_SEARCH_QTT = 100
            STEPS_TO_AVOIDANCE_QTT = 70
            BIFURCATION_SKIP = 20

        --Braitenberg
            -- Braitenberg weights for the 4 front prox sensors -- constants for object avoidance:
            braitFrontSens_leftMotor={3,4,-4,-3}
            -- Braitenberg weights for the 2 side prox sensors - constans for bypassing:
            braitSideSens_leftMotor={-2,0}

    --Variables Initialization
        
        stopCondition = true        --condition that verify if the end point was reached
        rightOnBifurcation = false  --saves the robot's decision in a bifurcation
        isTurning = false           --is the robot bypassing a object?
        isTurningLeft = false       --in which side is the robot bypassing    
        stepsToSearch = 0           --delay from object avoidance to search
        stepsToAvoidance = 0        --delay from following line to avoidance
        nextState = STARTING_SIM    --defines first state of the robot
        skipNow = 0                 --used to skip simulation steps
        skipSimStep = 0             --used to skip simulation steps
        ledColors={{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}} 
        
    -- Code in the loop
    while sim.getSimulationState()~=sim.simulation_advancing_abouttostop do

    --Variables initialization in-loop
        st=sim.getSimulationTime()
        velLeft=0
        velRight=0
        lightSens=getLightSensors()
        s=sim.getObjectSizeFactor(bodyElements) -- make sure that if we scale the robot during simulation, other values are scaled too!
        noDetectionDistance=0.05*s
        proxSensDist={999,999,999,999,999,999,999,999}
        encouteredObject={'oi','oi','oi','oi','oi','oi','oi','oi'}
        for i=1,8,1 do
            res,dist,garbage,objectName=sim.readProximitySensor(proxSens[i])
            if ((res>0) and (dist<noDetectionDistance) and (dist~=nil)) then
                proxSensDist[i]=dist
                encouteredObject[i] = objectName
            else
                proxSensDist[i]=noDetectionDistance
            end            
        end
        --verifies if the robot reached the end of path
        for i = 2,5,1 do
            if(encouteredObject[i] == 16) then
              stopCondition = false
            end
        end
                
        --skipSimStep is used to do the same movement throught some steps, in other words, the robot will follow blindly the command
        --if the robot reached the end, if does not moves anymore
        if ((skipSimStep == 0) and (stopCondition)) then 
        -- There are five robot states, in each one, the robot will follow a specific behavior, until its state changes
        
             if (nextState == STARTING_SIM) then 
             --In this state, the robot gets out of the starting black dot, to start its simulation
                printToConsole('STARTING_SIM')
                turnLedOn(BLUE)
                setSpeed(1,1)
                skipNow = START_SKIPPING
                nextState = SEARCHING_LINE

            elseif (nextState == SEARCHING_LINE) then
            --In this state, the robot search for the line and avoid objects
                printToConsole('SEARCHING_LINE')       
                stepsToSearch = STEPS_TO_SEARCH_QTT
                stepsToAvoidance = stepsToAvoidance - 1
                turnLedOn(BLUE)
                --if the robot reach the line in an almost obtuse angle then do a heavy turn
                if ((lightSens[2] < 0.3) and ((lightSens[1] < 0.6) or (lightSens[3] < 0.6))) then
                    --if the robot was bypassing an object, do a heavy turn in the same direction
                    if ((isTurning)) then
                        if (isTurningLeft) then 
                            isTurningLeft = false
                            setSpeed(-1,1)
                            skipNow = NINETY_DEGREE_TURN
                        else
                            setSpeed(1,-1)
                            skipNow = NINETY_DEGREE_TURN
                        end
                    isTurning = false
                    --do the turn in the right direction
                    elseif (lightSens[1]<lightSens[3])then  
                        setSpeed(-1,1)
                        skipNow = NINETY_DEGREE_TURN_NORMAL
                        nextState = LINE_FOLLOWING
                    elseif (lightSens[1]>=lightSens[3]) then
                        setSpeed(1,-1)
                        skipNow = NINETY_DEGREE_TURN_NORMAL
                        nextState = LINE_FOLLOWING
                    end
                --is there a object nearby? do a 160 degree turn
                elseif ((isObjectInFront()) and (stepsToAvoidance<0)) then
                    if ((proxSensDist[2]<noDetectionDistance) or (proxSensDist[3]<noDetectionDistance)) then
                        setSpeed(1,-1)
                        skipNow = U_TURN
                    else 
                        velRight=maxVel
                        velLeft=-maxVel
                        skipNow = U_TURN
                    end
                else
                --if no line or object is close, go straight
                    setSpeed(1,1)
                end
                --reached the line? then change robots state
                if (isFollowingLine()) then
                    nextState = LINE_FOLLOWING
                end
               
            elseif (nextState == LINE_FOLLOWING) then
            --In this state, the robot uses Braitenberg 2a vehicle principle to follow the path, then it verify if there is an object nearby
                printToConsole('LINE_FOLLOWING')  
                stepsToAvoidance = stepsToAvoidance - 1
                previousState = nextState
                turnLedOn(GREEN)
                delta = lightSens[3] - lightSens[1]
                if (math.abs(delta)<MAX_LIGHT_DIFFERENCE) then
                    setSpeed(1,1)
                else
                    velLeft = (DEFAULT_SPEED - SPEED_STEP*delta)*maxVel
                    velRight = (DEFAULT_SPEED + SPEED_STEP*delta)*maxVel
                end   
                --If there is a bifurcation, turn in the unexplored direction
                if ((lightSens) and ((lightSens[1] < 0.1) and (lightSens[2] > 0.9) and (lightSens[3] < 0.1))) then
                    if (not rightOnBifurcation) then
                        turnLedOn(PURPLE)
                        setSpeed(1,0.3)
                        skipNow = BIFURCATION_SKIP
                        rightOnBifurcation = true
                        printToConsole('VALOR DA BIFUCA?AO MUDANDO')
                        printToConsole(rightOnBifurcation)
                    elseif (rightOnBifurcation) then
                        turnLedOn(PURPLE)
                        setSpeed(0.2,1)
                        skipNow = BIFURCATION_SKIP
                    end 
                --Is there an object nearby? change robot state to avoid it
                elseif ((isObjectInFront()) and (stepsToAvoidance<0))  then 
                   nextState = OBJECT_IN_FRONT
                elseif ((isBypassingObject()) and (stepsToAvoidance<0)) then
                   nextState = BYPASSING_OBJECT
                end

            elseif (nextState == OBJECT_IN_FRONT) then
                --in this state the robot turn to avoid the object using braintenberg constans
                stepsToAvoidance = STEPS_TO_AVOIDANCE_QTT
                printToConsole('OBJECT_IN_FRONT')
                setSpeed(1,1)
                for i=1,4,1 do
                    turnLedOn(RED)
                    if((math.abs(proxSensDist[3] - proxSensDist[4]) < INDECISION_DIFFERENCE) and ((proxSensDist[3]~=noDetectionDistance) or (proxSensDist[4]~=noDetectionDistance))) then
                        setSpeed(-1,1)
                        skipNow = INDECISION_SKIP
                    else
                        velLeft=velLeft+maxVel*braitFrontSens_leftMotor[i]*(1-(proxSensDist[1+i]/noDetectionDistance))
                        velRight=velRight+maxVel*braitFrontSens_leftMotor[5-i]*(1-(proxSensDist[1+i]/noDetectionDistance))
                    end
                end
                stepsToSearch = stepsToSearch - 1
                --did the robot find again the path? change state to searching line
                if ((lightSens) and ((lightSens[1] < 0.9) or (lightSens[2] < 0.9) or (lightSens[3] < 0.9)) and (stepsToSearch <= 0)) then
                    nextState = SEARCHING_LINE
                --did the robot turn enough to avoid the object and needs to bypass it? change state to bypass
                elseif (isBypassingObject()) then
                    nextState = BYPASSING_OBJECT
                end

            elseif (nextState == BYPASSING_OBJECT) then
                --in this state the robot bypass the object using braintenberg constans
                stepsToAvoidance = STEPS_TO_AVOIDANCE_QTT
                printToConsole('BYPASSING_OBJECT')
                isTurning = true
                setSpeed(1,1)
                if ((proxSensDist[1]>DISTANCE_THRESHOLD*noDetectionDistance) and (proxSensDist[1]~=noDetectionDistance)) then
                    isTurningLeft = false
                    velLeft=velLeft+maxVel*braitSideSens_leftMotor[1]*(1-(proxSensDist[1]/noDetectionDistance))
                    velRight=velRight+maxVel*braitSideSens_leftMotor[2]*(1-(proxSensDist[1]/noDetectionDistance))
                end
                if ((proxSensDist[6]>DISTANCE_THRESHOLD*noDetectionDistance) and (proxSensDist[6]~=noDetectionDistance)) then
                    isTurningLeft = true
                    velLeft=velLeft+maxVel*braitSideSens_leftMotor[2]*(1-(proxSensDist[6]/noDetectionDistance))
                    velRight=velRight+maxVel*braitSideSens_leftMotor[1]*(1-(proxSensDist[6]/noDetectionDistance))
                end
                turnLedOn(YELLOW)
                stepsToSearch = stepsToSearch - 1
                 if ((lightSens) and ((lightSens[1] < 0.9) or (lightSens[2] < 0.9) or (lightSens[3] < 0.9)) and (stepsToSearch <= 0)) then
                    nextState = SEARCHING_LINE
                --is the object in front of the robot again? change state
                elseif (isObjectInFront())  then 
                   nextState = OBJECT_IN_FRONT
                end
            end
        end

        checkVelocityLimits()
        --Just update speed values if robot is not repeating a operation
        if(skipSimStep == 0) then
            sim.setJointTargetVelocity(leftMotor,velLeft)
            sim.setJointTargetVelocity(rightMotor,velRight)
            skipSimStep = skipNow
            skipNow = 0
        else 
            skipSimStep = skipSimStep - 1
        end
        actualizeLEDs()
        sim.switchThread() -- Don't waste too much time in here (simulation time will anyway only change in next thread switch)
    end
end

--Functions
setSpeed = function(left,right)
    --set robot velocity based on its max
    velLeft = maxVel*left
    velRight = maxVel*right
end
actualizeLEDs=function()
    --led light configuration
    if (relLedPositions==nil) then
        relLedPositions={{-0.0343,0,0.0394},{-0.0297,0.0171,0.0394},{0,0.0343,0.0394},
                    {0.0297,0.0171,0.0394},{0.0343,0,0.0394},{0.0243,-0.0243,0.0394},
                    {0.006,-0.0338,0.0394},{-0.006,-0.0338,0.0394},{-0.0243, -0.0243,0.0394}}
    end
    if (drawingObject) then
        sim.removeDrawingObject(drawingObject)
    end
    type=sim.drawing_painttag+sim.drawing_followparentvisibility+sim.drawing_spherepoints+
        sim.drawing_50percenttransparency+sim.drawing_itemcolors+sim.drawing_itemsizes+
        sim.drawing_backfaceculling+sim.drawing_emissioncolor
    drawingObject=sim.addDrawingObject(type,0,0,bodyElements,27)
    m=sim.getObjectMatrix(ePuckBase,-1)
    itemData={0,0,0,0,0,0,0}
    sim.setLightParameters(ledLight,0)
    for i=1,9,1 do
        if (ledColors[i][1]+ledColors[i][2]+ledColors[i][3]~=0) then
            p=sim.multiplyVector(m,relLedPositions[i])
            itemData[1]=p[1]
            itemData[2]=p[2]
            itemData[3]=p[3]
            itemData[4]=ledColors[i][1]
            itemData[5]=ledColors[i][2]
            itemData[6]=ledColors[i][3]
            sim.setLightParameters(ledLight,1,{ledColors[i][1],ledColors[i][2],ledColors[i][3]})
            for j=1,3,1 do
                itemData[7]=j*0.003
                sim.addDrawingObjectItem(drawingObject,itemData)
            end
        end
    end
end

getLightSensors=function()
    --receive data sent from light sensors child script
    data=sim.receiveData(0,'EPUCK_lightSens')
    if (data) then
        lightSens=sim.unpackFloatTable(data)
    end
    return lightSens
end
turnLedOn=function(color)
    --blinking patern for leds
    if (math.mod(st,2)>1.5) then
        thisColor = color
        else
            thisColor=OFF
        end
    for i=1,9,1 do
        ledColors[i]=thisColor
    end
end
checkVelocityLimits=function()
    --do not let the robot reach an impossible velocity
    if (velLeft>maxVel) then
        velLeft = maxVel
    end
    if (velLeft<-maxVel) then
        velLeft = -maxVel
    end
    if (velRight<-maxVel) then
        velRight = -maxVel
    end
    if (velRight<-maxVel) then
        velRight = -maxVel
    end
end
isFollowingLine = function()
    --verifies if the robot is following a line
    if ((lightSens) and ((lightSens[2] > 0.7 ) and ((lightSens[1] < 0.3) or (lightSens[3] < 0.3))) and 
    ((proxSensDist[2]+proxSensDist[3]+proxSensDist[4]+proxSensDist[5]==noDetectionDistance*4))) then
        return true
    else 
        return false
    end
end
isBypassingObject = function()
    --verifies if the robot is bypassing an object
    if ((proxSensDist[2]+proxSensDist[3]+proxSensDist[4]+proxSensDist[5]==noDetectionDistance*4) and
    ((proxSensDist[1]~=noDetectionDistance) or (proxSensDist[6]~=noDetectionDistance)))then
        return true
    else
        return false
    end
end
isObjectInFront = function()
    --verifies if there is an object in front of the robot
    if (proxSensDist[2]+proxSensDist[3]+proxSensDist[4]+proxSensDist[5]==noDetectionDistance*4) then
        return false
    else
        return true
    end
end

function sysCall_cleanup()
    -- Put some clean-up code here:
    for i=1,9,1 do
        ledColors[i]={0,0,0} -- no light
    end
    actualizeLEDs()
end
